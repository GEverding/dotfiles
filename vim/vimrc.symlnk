" vim: set foldmarker={,} foldlevel=0 foldmethod=marker:
" Author: Garrett Everding <garrett.everding92@gmail.com>

  " Basics {
    set nocp

  filetype off
" }

" Vundle {
  set rtp+=~/.vim/bundle/Vundle.vim
  call vundle#begin()

  " Plugins {
    Plugin 'VundleVim/Vundle.vim'
    if executable('ag')
      "Plugin 'epmatsw/ag.vim'
      Plugin 'derekwyatt/ag.vim'
    endif
    Plugin 'GEverding/wombat256.vim'
    Plugin 'Valloric/YouCompleteMe'
    "Plugin 'scrooloose/nerdtree'
    Plugin 'tpope/vim-surround'
    "Plugin 'tpope/vim-unimpaired'
    Plugin 'kien/ctrlp.vim'
    " Plugin 'taglist.vim'
    " Plugin 'godlygeek/csapprox'
    " Plugin 'mbbill/undotree'
    Plugin 'myusuf3/numbers.vim'
    Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'vim-airline/vim-airline'
    Plugin 'vim-airline/vim-airline-themes'

    " Plugin 'jamessan/vim-gnupg'
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
    Plugin 'tomtom/tcomment_vim'
    Plugin 'scrooloose/syntastic'
    Plugin 'tpope/vim-fugitive'
    "Plugin 'Lokaltog/vim-easymotion'
    Plugin 'airblade/vim-gitgutter'
    "Plugin 'godlygeek/tabular'
    Plugin 'Raimondi/delimitMate'
    " Plugin 'majutsushi/tgbar'
    " Plugin '29decibel/vim-stringify'
    Plugin 'tpope/vim-repeat'

    " Golang {
    "Plugin 'jnwhiteh/vim-golang'
    " }

    " JSON {
      Plugin 'leshill/vim-json'
    " }

    " HTML {
      " Plugin 'digitaltoad/vim-jade'
      " Plugin 'othree/html5.vim'
      " Plugin 'amirh/HTML-AutoCloseTag'
      " Plugin 'mattn/emmet-vim'
    " }

    " Coffeescript {
      "Plugin 'GEverding/coffeescript.vim'
      "Plugin 'kchmck/vim-coffee-script.git'
    " }

    " Javascript {
      " Plugin 'pangloss/vim-javascript'
      " Plugin 'jelera/vim-javascript-syntax'
      " Plugin 'JavaScript-Indent'
    " }

    " Rust {
    "Plugin 'bryanjswift/vim-rust'
    " }

    " Scala {
      " Plugin 'derekwyatt/vim-scala'
      " Plugin 'derekwyatt/vim-sbt'
      " Plugin 'gre/play2vim'
      " Plugin 'GEverding/vim-hocon'
    " }

    " Clojure {
      Plugin 'guns/vim-clojure-static'
      Plugin 'guns/vim-clojure-highlight'
      Plugin 'tpope/vim-fireplace'
      Plugin 'kien/rainbow_parentheses.vim'
      " Plugin 'tpope/vim-classpath'
      Plugin 'paredit.vim'
      " Plugin 'tpope/vim-leiningen'
    " }

    " PHP {
    "Plugin 'spf13/PIV.git'
    " }

    " Python {
      Plugin 'python.vim'
      Plugin 'klen/python-mode'
    " }

    " C/C++ {
      " Plugin 'a.vim'
      " Plugin 'brookhong/cscope.vim'
    " }

    "Ruby {
    Plugin 'vim-ruby/vim-ruby'
    Plugin 'tpope/vim-rails'
    " }

    " Haskell {
    " Plugin 'eagletmt/ghcmod-vim'
    " Plugin 'eagletmt/neco-ghc'
    " Plugin 'dag/vim2hs'
    " Plugin 'bitc/vim-hdevtools'
    " }

    " SQL {
    "Plugin 'SQLComplete.vim'
    "Plugin 'SQLUtilities'
    " }

    " qml {
      " Plugin 'peterhoeg/vim-qml'
    " }

    " Writing {
      " Plugin 'tpope/vim-markdown'
      " Plugin 'vim-pandoc/vim-pantondoc'
      " Plugin 'vim-pandoc/vim-pandoc-syntax'
      " Plugin 'vim-pandoc/vim-pandoc-after'
      " Plugin 'reedes/vim-lexical'
      " Plugin 'reedes/vim-wordy'
    " }

  call vundle#end()
  " }

  filetype plugin indent on
  syntax enable

" }

" Configuration Options {

  " wrap long lines
  set nowrap
  " turn spelling off
  set nospell

  " Formatting {
    " indent at the same level of the previous line
    set autoindent
    set tabstop=2
    " use indents of 2 spaces
    set shiftwidth=2
    " use multiple of shiftwidth when indenting with '<' and '>'
    set shiftround
    " tabs are spaces, not tabs
    set expandtab

    " let backspace delete indent
    set softtabstop=2

    " Display Numbers
    set number
  " }

  " Searching {

    " highlight search terms
    set hlsearch
    " show search matches as you type
    set incsearch
    " case insensitive search
    set ignorecase
    " case sensitive when uc presentet history=1000
    set smartcase

  " }

  " Hides Buffers instead of Closing them
  set hidden
  set ruler
  set history=1000
  set cursorline
  " better unix / windows compatibility
  set mouse=a
  " abbrev. of messages (avoids 'hit enter')
  set shortmess+=filmnrxoOtT
  " better unix / windows compatibility
  set viewoptions=folds,options,cursor,unix,slash

  " allow for cursor beyond last character"
  set virtualedit=onemore
  set foldenable
  "set colorcolumn=81
  set tags=tags
  set laststatus=2 " Always display the statusline in all windows
  set noshowmode " Hide the default mode text (e.g. -- INSERT -- below the statusline)
  "set showmode
  " backspace for dummies
  set backspace=indent,eol,start
  " backspace and cursor keys wrap to
  set whichwrap=b,s,h,l,<,>,[,]
  " lines to scroll when cursor leaves screen
  set scrolljump=5
  " minimum lines to keep above and below cursor
  set scrolloff=5

  set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.class,*.o,*.cnode,*.hnode,*.a

  set nu

  set backup
  set backupdir=~/.vimbackup
  if has('persistent_undo')
    set undofile                " Save undo's after file closes
    set undodir=$HOME/.vimundo  " where to save undo histories
    set undolevels=1000         " How many undos
    set undoreload=10000        " number of lines to save for undo
  endif
  set listchars=tab:›\ ,trail:•,extends:#,nbsp:. " Highlight problematic whitespace
  set autoread
  set wildmenu

" }

" Autocommands {

  au BufEnter,BufRead,BufNewFile *.do set ft=sh
  au BufEnter,BufRead,BufNewFile *.js set filetype=javascript
  au BufEnter,BufRead,BufNewFile *.coffee set filetype=coffee
  au BufEnter,BufRead,BufNewFile *.jade set filetype=jade
  au BufEnter,BufRead,BufNewFile *.json set ft=json
  au BufEnter,BufRead,BufNewFile *.less set filetype=less
  au BufEnter,BufRead,BufNewFile *.md set filetype=markdown
  au BufEnter,BufRead,BufNewFile *.scala set ft=scala
  au BufEnter,BufRead,BufNewFile *.rs set ft=rust
  au BufEnter,BufRead,BufNewFile *.go set filetype=go
  au BufEnter,BufRead,BufNewFile *.md set filetype=markdown
  au BufEnter,BufRead,BufNewFile *.md set filetype=markdown
  au BufRead,BufNewFile *.scss set filetype=scss.css


  " Remove White space and ^M
  autocmd FileType c,cpp,java,go,php,javascript,python,twig,xml,yml,clojure,rb autocmd BufWritePre <buffer> call StripTrailingWhitespace()

  " Open to last position
  au BufWinLeave *.* silent!  mkview
  au BufWinEnter *.* silent! loadview

  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
  au Syntax * RainbowParenthesesLoadBraces

  au FileType clojure let b:delimitMate_matchpairs = "(:),[:],{:}"
  au FileType clojure let b:delimitMate_quotes = "\""

  au FileType python setl sw=2 ts=2 textwidth=0 noexpandtab

" }

" Re-Mappings {
  inoremap jj <ESC>
  let mapleader= ','

  " Better Movement
  map <C-J> <C-W>j<C-W>
  map <C-K> <C-W>k<C-W>
  map <C-L> <C-W>l<C-W>
  map <C-H> <C-W>h<C-W>

  " Tab Switching
  noremap <C-1> 1gt
  noremap <C-2> 2gt
  noremap <C-3> 3gt
  noremap <C-4> 4gt

  " Clear Search
  nmap <silent> <leader>/ :nohlsearch<CR>

  " screen line scroll
  nnoremap <silent> j gj
  nnoremap <silent> k gk

  " reselect visual block after indent
  vnoremap < <gv
  vnoremap > >gv

  " Remove Whitepace
  nnoremap <silent> <F3> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>

  "Switch number mode
  " nnoremap <F3> :NumbersToggle<CR>

  " Set panes to same width
  map <Leader>= <C-w>=

  " For when I forget to sudo
  cmap w!! w !sudo tee % >/dev/null

  " ag.vim {
    nmap ,sf :AgForCurrentFileDir
    nmap ,sr :AgForProjectRoot
    nmap ,se :AgForExtension
    let g:ag_results_mapping_replacements = {
    \   'open_and_close': '<cr>',
    \   'open': 'o',
    \ }
    vmap <Leader>s "vy:Ag <C-r>v<CR>
    nmap <Leader>s "vyiw:Ag <C-r>v<CR>
  " }

  nmap <silent> ,cr :lcd <c-r>=FindGitDirOrRoot()<cr><cr>


  " delimitMate {
    imap <C-f> <CR><Esc>O
  " }

  " switch between .c and .h {
    nmap <leader>a :e %:p:s,.h$,.X123X,:s,.c$,.h,:s,.X123X$,.c,<CR>
  " }

" }

" Color Configurations {
  syn match myTodo contained   "\<\(TODO\|FIXME\|HACK\|NOTE\|WTF\):"
  hi def link myTodo Todo
" }

" Plugins {

  " OmniComplete {

    hi Pmenu  guifg=#000000 guibg=#F8F8F8 ctermfg=black ctermbg=Lightgray
    hi PmenuSbar  guifg=#8A95A7 guibg=#F8F8F8 gui=NONE ctermfg=darkcyan ctermbg=lightgray cterm=NONE
    hi PmenuThumb  guifg=#F8F8F8 guibg=#8A95A7 gui=NONE ctermfg=lightgray ctermbg=darkcyan cterm=NONE

  " }

  " UltiSinps {
    let g:UltiSnipsExpandTrigger="<c-k>"
    let g:UltiSnipsJumpForwardTrigger="<c-j>"
    let g:UltiSnipsJumpBackwardTrigger="<c-k>"

    " If you want :UltiSnipsEdit to split your window.
    let g:UltiSnipsEditSplit="vertical"
  " }

      " Enable omni completion.
      autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
      autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
      autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
      "autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
      autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
  " }

  " Indent Guides {
    let g:indent_guides_auto_colors = 0
    "set ts=2 sw=2 et
    let g:indent_guides_start_level = 2
    let g:indent_guides_guide_size = 1
    let g:indent_guides_enable_on_vim_startup = 0
    let g:indent_guides_enable_on_vim_startup = 1
  "}

  " UndoTree {
    nnoremap <Leader>u :UndotreeToggle<CR>
    if has ('persistent_mode')
      set undofile
      set undolevel=1000
      set undoeload=10000
    endif

  " }

  " NerdTree {
     "
     " map <C-e> :NERDTreeToggle<CR>
     " map <leader>e :NERDTREEFind<CR>
     "
     " "let NERDTreeShowBookmakrs=1
     " let NERDTreeIgnore=['\.git', '\.redo$', '\~$', '\.swp$', '\.hg', '\.class']
     " "let NERDTreeChDirMode=1
     " "let NERDTreeShowBookmakrs=1
     " "let NERDTreeMouseMode=1
     " let NERDTreeQuitOnOpen=1
     " "let NEDTreeMouseMode=2
     " "let NERDTreeShowHidden=1
     " "let NERDTreeKeepTreeInNewTab=1
     " "let g:nerdtree_tabs_open_on_gui_startup=0
   " }

    " Tabularize {

      nmap <Leader>a= :Tabularize /=<CR>
      vmap <Leader>a= :Tabularize /=<CR>
      nmap <Leader>a: :Tabularize /:\zs<CR>
      vmap <Leader>a: :Tabularize /:\zs<CR>

    " }

   " Powerline {

     "let g:Powerline_symbols='fancy'

     if has('statusline')
       " Broken down into easily includeable segments
       set statusline=%<%f\    " Filename
       set statusline+=%*
       set statusline+=%{fugitive#statusline()} "  Git Hotness
       set statusline+=\ [%{&ff}/%Y]            " filetype
       set statusline+=\ [%{getcwd()}]          " current dir
       set statusline+=%=%-14.(%l,%c%V%)\ %p%%  " Right aligned file nav
     endif

   " }

   " Syntasic {
      let g:syntastic_error_symbol='✗>'
      let g:syntastic_style_error_symbol='✗>'
      let g:syntastic_warning_symbol='⚠>'
      let g:syntastic_style_warning_symbol='⚠>'

      let g:syntastic_check_on_open = 0
      let g:syntastic_javascript_checkers = ['jshint']
      let g:syntastic_jshint_exec="/Users/geverding/.local/bin/jshint"
      let g:syntastic_scala_checkers = ['']
      let g:syntastic_html_checkers = ['']
      let g:syntastic_haskell_checkers = ['ghc_mod', 'hlint']
      "let g:syntastic_scalac_exec="/Users/geverding/software/scala-2.10.3/bin/scalac"
      let g:syntastic_c_check_header = 1
      let g:syntastic_c_compiler = 'clang'
      let g:syntastic_fsc_exec = '/Users/geverding/software/scala-2.10.3/bin/fsc'

   " }

   " VimWiki {
     "let g:vimwiki_list = [{'path': '~/.vimwiki',
                          "\ 'syntax': 'markdown', 'ext': '.md'}]
   " }

    " Colorcolums {
        "hi ColorColumn guibg=#2d2d2d ctermbg=246
    " }

    " ctrlp {
      let g:ctrlp_cmd = "CtrlP"
      let g:ctrlp_working_path_mode = 'ra'
      let g:ctrlp_root_markers = ['.root']
      let g:ctrlp_extensions = ['tag']

      let g:ctrlp_custom_ignore = '\v%(/\.%(git|hg|svn)|\.%(class|o|png|jpg|jpeg|bmp|tar|jar|tgz|deb|zip|pyc)$|/target|/target/%(quickfix|resolution-cache|streams|test-reports)|/target/scala-2.10/%(classes|test-classes|sbt-0.13|cache|test-reports)|/project/target|/project/project|/resources/public/css|/resources/public/%(js/out|css/lib|font)|/resources/web|/node_modules|/.env/%(lib|local|include))'
      "let g:ctrlp_custom_ignore = {
        "\ 'dir': '\node_modules$\|\.DS_Store$\|\.git$\|\.hg$\|\.svn$\|\.redo$\',
        "\ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$|\.dir$|\.class$\' }


      "let g:ctrlp_user_command = {
      "    \ 'types': {
      "        \ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
      "        \ 2: ['.hg', 'hg --cwd %s locate -I .'],
      "    \ },
      "    \ 'fallback': 'find %s -type f'
      "\ }
    " }

    " airline {
      let g:airline_theme='badwolf'
      let g:airline#extensions#tabline#enabled = 0

      if !exists('g:airline_symbols')
        let g:airline_symbols = {}
      endif

      let g:airline_left_sep = '»'
      let g:airline_left_sep = '▶'
      let g:airline_right_sep = '«'
      let g:airline_right_sep = '◀'
      let g:airline_symbols.linenr = '␊'
      let g:airline_symbols.linenr = '␤'
      let g:airline_symbols.linenr = '¶'
      let g:airline_symbols.branch = '⎇'
      let g:airline_symbols.paste = 'ρ'
      let g:airline_symbols.paste = 'Þ'
      let g:airline_symbols.paste = '∥' 
      let g:airline_symbols.whitespace = 'Ξ'

      let g:airline_powerline_fonts=1
      let g:airline_left_sep = ''
      let g:airline_left_alt_sep = ''
      let g:airline_right_sep = ''
      let g:airline_right_alt_sep = ''
      let g:airline_symbols.branch = ' '
      let g:airline_symbols.readonly = ''
      let g:airline_symbols.linenr = ' '
      let g:airline#extensions#branch#displayed_head_limit = 8
      let g:airline#extensions#hunks#enabled = 0

      let g:airline_section_x= ""
      let g:airline#extensions#whitespace#trailing_format = 'ws[%s]'
      let g:airline#extensions#whitespace#mixed_indent_format = 'mi[%s]'
    " }

    " taglist.vim {

      " Taglist Scala support
      """"" Settings for taglist.vim
      let Tlist_Use_Right_Window=1
      let Tlist_Auto_Open=0
      let Tlist_Enable_Fold_Column=0
      let Tlist_Compact_Format=0
      let Tlist_WinWidth=28
      let Tlist_Exit_OnlyWindow=1
      let Tlist_File_Fold_Auto_Close = 1
      let tlist_scala_settings = 'scala;' .
                              \ 'p:packages;' .
                              \ 'a:abstract classes;' .
                              \ 'c:classes;' .
                              \ 'm:case classes;' .
                              \ 'o:objects;' .
                              \ 'M:case objects;' .
                              \ 't:traits;' .
                              \ 'T:types;' .
                              \ 'f:functions;' .
                              \ 'V:values;' .
                              \ 'v:variables'
    " }

    " coffeetags {
      let g:tagbar_width = 20
      let g:tagbar_compact = 1
      let g:tagbar_indent = 1
      let g:tagbar_autoclose = 1
      let g:tagbar_autofocus = 1
      let g:tagbar_sort = 0
      if executable('coffeetags')
        let g:tagbar_type_coffee = {
              \ 'ctagsbin' : 'coffeetags',
              \ 'ctagsargs' : '',
              \ 'kinds' : [
              \ 'f:functions',
              \ 'o:object',
              \ ],
              \ 'sro' : ".",
              \ 'kind2scope' : {
              \ 'f' : 'object',
              \ 'o' : 'object',
              \ }
              \ }
      endif
    " }

    " tagbar {
      " nmap <F3> :TagbarToggle<CR>
    " }

    " lushtags {
      " if executable('lushtags')
      "     let g:tagbar_type_haskell = {
      "         \ 'ctagsbin' : 'lushtags',
      "         \ 'ctagsargs' : '--ignore-parse-error --',
      "         \ 'kinds' : [
      "             \ 'm:module:0',
      "             \ 'e:exports:1',
      "             \ 'i:imports:1',
      "             \ 't:declarations:0',
      "             \ 'd:declarations:1',
      "             \ 'n:declarations:1',
      "             \ 'f:functions:0',
      "             \ 'c:constructors:0'
      "         \ ],
      "         \ 'sro' : '.',
      "         \ 'kind2scope' : {
      "             \ 'd' : 'data',
      "             \ 'n' : 'newtype',
      "             \ 'c' : 'constructor',
      "             \ 't' : 'type'
      "         \ },
      "         \ 'scope2kind' : {
      "             \ 'data' : 'd',
      "             \ 'newtype' : 'n',
      "             \ 'constructor' : 'c',
      "             \ 'type' : 't'
      "         \ }
      "     \ }
      " endif
    " }

    " syntastic {

    " }

    " javascript {
    let g:javascript_conceal = 0
    "}

    " tComment {
      nmap <silent> <leader>c<space> :TComment<cr>
      vmap <silent> <leader>c<space> :TComment<cr>
      nmap <silent> <leader>cs<space> :TCommentBlock<cr>
      vmap <silent> <leader>cs<space> :TCommentBlock<cr>
      nmap <silent> <leader>cp<space> m`vip:TComment<cr>``
      vmap <silent> <leader>cp<space> m`vip:TComment<cr>``
    " }

    " lexical {
      let g:lexical#spelllang = ['en_ca']
    " }

    " clojure {
      "Align subsequent lines in multiline strings to the column after the opening quote, instead of the same column.
      let g:clojure_align_multiline_strings = 1
    " }

    " rainbow_parenthesis {
        let g:rbpt_colorpairs =  [
              \ ['Darkblue',    'SeaGreen3'],
              \ ['brown',       'RoyalBlue3'],
              \ ['darkgray',    'DarkOrchid3'],
              \ ['darkgreen',   'firebrick3'],
              \ ['darkcyan',    'RoyalBlue3'],
              \ ['darkred',     'SeaGreen3'],
              \ ['darkmagenta', 'DarkOrchid3'],
              \ ['brown',       'firebrick3'],
              \ ['gray',        'RoyalBlue3'],
              \ ['darkmagenta', 'DarkOrchid3'],
              \ ['Darkblue',    'firebrick3'],
              \ ['darkgreen',   'RoyalBlue3'],
              \ ['darkcyan',    'SeaGreen3'],
              \ ['darkred',     'DarkOrchid3'],
              \ ['red',         'firebrick3'],
              \ ]
            " \ ['black',       'SeaGreen3'],
        let g:rbpt_max = 16
    " }

    " pymode {
    let g:pymode_lint = 0
    let g:pymode_doc = 0
    " }
" }

" Remove Bell {
  set noerrorbells visualbell t_vb=
  if has('autocmd')
    autocmd GUIEnter * set visualbell t_vb=
  endif
" }

" GUI Settings {
  "GVIM
  if has('gui_running')
    set guioptions-=T
    set guioptions+=LlRrbh
    set guioptions-=LlRrbh
    set lines=40
    if has('gui_gtk2')
      "set guifont=Andale\ Mono\ Regular\ 16,Menlo\ Regular\ 15,Consolas\ Regular\ 16,Courier\ New\ Regular\ 18
      set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 14
    else
      set guifont=DejaVu\ Sans\ Mono\ for\ Powerline\ 14
      " set guifont=Andale\ Mono\ Regular:h16,Menlo\ Regular:h15,Consolas\ Regular:h16,Courier\ New\ Regular:h18
    endif
    if has('gui_macvim')
      set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h16
      set transparency=0
    endif
  else
    set guifont=DejaVu\ Sans\ Mono\ for\ Powerline:h13
    set clipboard=unnamed
    if &term == 'xterm' || &term == 'screen'
      set t_Co=256
    endif
  endif

" }

" Functions {
  " function: InitializeDirectories {
    function! InitializeDirectories()
        let separator = "."
        let parent = $HOME
        let prefix = '.vim'
        let dir_list = {
                    \ 'backup': 'backupdir',
                    \ 'views': 'viewdir',
                    \ 'swap': 'directory' }

        if has('persistent_undo')
            let dir_list['undo'] = 'undodir'
        endif

        for [dirname, settingname] in items(dir_list)
            let directory = parent . '/' . prefix . dirname . "/"
            if exists("*mkdir")
                if !isdirectory(directory)
                    call mkdir(directory)
                endif
            endif
            if !isdirectory(directory)
                echo "Warning: Unable to create backup directory: " . directory
                echo "Try: mkdir -p " . directory
            else
                let directory = substitute(directory, " ", "\\\\ ", "g")
                exec "set " . settingname . "=" . directory
            endif
        endfor
    endfunction
    call InitializeDirectories()
  " }

  " function: Strip whitespace {
    function! StripTrailingWhitespace()
      " Preparation: save last search, and cursor position.
      let _s=@/
      let l = line(".")
      let c = col(".")
      " Do the business:
      %s/\s\+$//e
      " Clean up: restore previous search history, and cursor position
      let @/=_s
      call cursor(l, c)
    endfunction
  " }

  " function: Execute Command {
    function! RCmd(cmd)
      :silent! exe '!echo "cd ' . getcwd() . ' && ' . a:cmd . '" > /tmp/cmds'
      :redraw!
    endfunction
  " }
  "
  function! RCmd(cmd)
    :silent! exe '!echo "cd `pwd` && ' . a:cmd . '" > /tmp/cmds'
    :redraw!
  endfunction

  function! FindGitDirOrRoot()
    let curdir = expand('%:p:h')
    let gitdir = finddir('.git', curdir . ';')
    if gitdir != ''
      return substitute(gitdir, '\/\.git$', '', '')
    else
      return '/'
    endif
  endfunction

  func! WordProcessorMode()
    setlocal formatoptions=1
    setlocal noexpandtab
    setlocal spell spelllang=en_us
    set thesaurus+=~/.vim/thesaurus/mthesaur.txt
    set complete+=s
    set formatprg=par
    setlocal wrap
    setlocal linebreak
  endfu
" }

" Setup Local gvimrc {
  if filereadable(expand(".gvimrc.local"))
    source .gvimrc.local
  endif
" }

" Colorscheme {
  set background=dark
  colorscheme wombat256
" }

